// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //C instruction
    And(a=instruction[15], b=true, out=cInstr);
    //A instruction
    Not(in=cInstr, out=aInstr);
    
    //Mux1 + Reg A
    Mux16(a=aluOut, b=instruction, sel=aInstr, out=outMux1);
    And(a=cInstr, b=instruction[5], out=cInstrSaveA);
    Or(a=aInstr, b=cInstrSaveA, out=loadRegA);
    ARegister(in=outMux1, load=loadRegA, out=outRegA, out[0..14]=addressM);

    //Mux 2
    And(a=cInstr, b=instruction[12], out=mInsteadOfA);
    Mux16(a=outRegA, b=inM, sel=mInsteadOfA, out=outMux2);

    //ALU
    ALU(x=outRegD, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=outZero, ng=outNeg);

    // outPos
    Not(in=outZero, out=outNotZero);
    Not(in=outNeg, out=outNotNeg);
    And(a=outNotZero, b=outNotNeg, out=outPos);

    // Reg D
    And(a=cInstr, b=instruction[4], out=loadRegB);
    DRegister(in=aluOut, load=loadRegB, out=outRegD);

    And(a=outNeg, b=instruction[2], out=o1);
    And(a=outZero, b=instruction[1], out=o2);
    And(a=outPos, b=instruction[0], out=o3);
    Or(a=o1, b=o2, out=andO1O2);
    Or(a=andO1O2, b=o3, out=conditionPassed);

    And(a=instruction[0], b=instruction[1], out=andInst01);
    And(a=andInst01, b=instruction[2], out=jump);

    // if jump or conditionPassed -> loadPC
    Or(a=jump, b=conditionPassed, out=jumpOrCondition);
    And(a=cInstr, b=jumpOrCondition, out=loadPC);
    Not(in=loadPC, out=incPC);

    //PC
    PC(in=outRegA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

    // writeM
    And(a=cInstr, b=instruction[3], out=writeM);
}