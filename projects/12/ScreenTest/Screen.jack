// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN_BASE;
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN_BASE = 16384; //base address of the screen
        do Screen.setColor(true); //set initial color to black

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) { //8192 screen memory segments in total
            do Memory.poke(SCREEN_BASE + i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int memLocation;
        var int bit;
        var int currentValue;

        let memLocation = SCREEN_BASE + (y * 32) + (x / 16);
        let bit = x - ((x / 16) * 16); // x % 16

        let currentValue = Memory.peek(memLocation);

        if (color) {
            do Memory.poke(memLocation, currentValue | twoToThe[bit]);
        } else {
            if (~((currentValue & twoToThe[bit]) = 0)) {
                do Memory.poke(memLocation, currentValue - twoToThe[bit]);
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        if (dx > 0) {
            do Screen.drawDiagonalLine(x1, y1, x2, y2);
        } else {
            do Screen.drawDiagonalLine(x2, y2, x1, y1);
        }

        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int dy, tmp;

        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dy = y2 - y1;
        while (dy > 0) {
            do Screen.drawPixel(x, y2 - dy);
            let dy = dy - 1;
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int dx, tmp;

        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }

        let dx = x2 - x1;
        while (dx > 0) {
            do Screen.drawPixel(x2 - dx, y);
            let dx = dx - 1;
        }

        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b;
        var int dx, dy;
        var int adyMinusbdy;

        let a = 0;
        let b = 0;
        let adyMinusbdy = 0;

        if (y2 > y1) {
            let dx = x2 - x1;
            let dy = y2 - y1;

            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdy < 0) {
                    let a = a + 1;
                    let adyMinusbdy = adyMinusbdy + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdy = adyMinusbdy - dx;
                }
            }
        } else {
            let dx = x2 - x1;
            let dy = y1 - y2;

            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (adyMinusbdy < 0) {
                    let a = a + 1;
                    let adyMinusbdy = adyMinusbdy + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdy = adyMinusbdy - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy;

        let dx = x2 - x1;
        while (dx > 0) {
            do Screen.drawVerticalLine(x2 - dx, y1, y2);
            let dx = dx - 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        if (r > 181) {
            let r = 181;
        }

        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);

            let dy = dy + 1;
        }

        return;
    }
}
