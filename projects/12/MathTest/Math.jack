// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        // let twoToThe[15] = 32768;
        let twoToThe[15] = 0;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        
        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        return sum;
    }

    function boolean bit(int x, int j) {
        var int res;

        if (j = 15) {
            if (x < 0) {
                return true;
            } else {
                return false;
            }
        }

        let res = x & twoToThe[j];
        return res > 0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, newY;
        var int sign;

        let sign = 1;
        if (x < 0) {
            let x = Math.abs(x);
            let sign = -1;
        }
        if (y < 0) {
            let y = Math.abs(y);
            let sign = sign * (-1);
        }

        if (y > x) {
            return 0;
        }

        let newY = 2 * y;
        if (newY > 0) {
            let q = Math.divide(x, newY);
        } else {
            let q = 0;
        }

        if ((x - (2 * q * y)) < y) {
            return sign * 2 * q;
        } else {
            return sign * ((2 * q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, n, tmp, tmpX2;
        let y = 0;
        let n = 16; //16 bit
        let j = (n / 2) - 1;

        while (~(j < 0)) {
            let tmp = y + twoToThe[j];
            let tmpX2 = tmp * tmp;

            if (~(tmpX2 > x) & (tmpX2 > 0)) {
                let y = tmp;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int max;
        let max = a;
        if (b > max) {
            let max = b;
        }
        return max;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int min;
        let min = a;
        if (b < min) {
            let min = b;
        }
        return min;
    }
}
