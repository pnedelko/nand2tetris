// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLength;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        let maxLength = maxLen;
        if (maxLen < 1) {
            let maxLength = 1;
        }
        let length = 0;
        let arr = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // do Output.printInt(arr);
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do setCharAt(length, c);
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int r, i, d;
        var boolean isNegative;

        let r = 0;
        let i = 0;

        // do Output.printString("intValue called!");
        // do Output.println();

        //if first char is minus
        if (charAt(0) = 45) {
            let isNegative = true;
            let i = i + 1;
        }

        while (i < length) {
            let d = charAt(i) - 48;
            let r = r * 10 + d;
            let i = i + 1;
        }

        if (isNegative) {
            return -r;
        }

        return r;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, l;
        var String newString;

        let newString = String.int2String(Math.abs(val));

        // do Output.printString("New string: ");
        // do Output.printString(newString);
        // do Output.println();

        let length = 0;
        if (val < 0) {
            do appendChar(45);
        }

        // copy new string
        let l = newString.length();
        let i = 0;
        while (i < l) {
            do appendChar(newString.charAt(i));
            let i = i + 1;
        }

        do newString.dispose();

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function String int2String(int n) {
        var int lastDigit, c;
        var String newString;

        if (n < 10) {
            // do Output.printString("n < 10");
            // do Output.println();

            let lastDigit = n;
            let c = lastDigit + 48; //character representation of lastDigit
            let newString = String.new(6);
            do newString.appendChar(c);
            return newString;
        } else {
            // do Output.printString("n > 10");
            // do Output.println();

            let lastDigit = n - ((n / 10) * 10); //n % 10
            let c = lastDigit + 48; //character representation of lastDigit
            let newString = String.int2String(n / 10);
            do newString.appendChar(c);
            return newString;
        }
    }
}
